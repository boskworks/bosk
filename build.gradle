plugins {
	id 'java'
	id 'com.diffplug.spotless' version '7.2.1'
	alias(libs.plugins.nexus)
	alias(libs.plugins.spotbugs) apply false
}

ext {
	jdkVersion = 25 // If you bump this, change the CI workflows too
	minSupportedJavaVersion = 25
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(jdkVersion)
	}
}

allprojects {
	repositories {
		mavenCentral()
	}

	group = 'works.bosk'
	// version should be set as a property with -Pversion

	tasks.withType(Javadoc).configureEach {
		options.addStringOption('Xdoclint:-missing', '-quiet')
	}
}

configure(subprojects.findAll {
	it.name.startsWith("bosk-") || it.name.startsWith("lib-")
}) {
	apply plugin: 'java-library'
	apply plugin: 'com.github.spotbugs'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(jdkVersion)
		}
	}

	compileJava {
		options.release = minSupportedJavaVersion
	}

	compileTestJava {
		options.release = null // Accept the default from the JDK
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = 'UTF-8'
		options.compilerArgs << '-Xlint'
		options.compilerArgs << '-Xlint:-serial'     // Don't care about Java serialization
		options.compilerArgs << '-Xlint:-try'        // Really annoying bogus "auto-closeable never used" warnings
		options.compilerArgs << '-Xlint:-processing' // Not all annotations are meant for compile-time "annotation processing"
		options.compilerArgs << '-Xlint:-missing-explicit-ctor' // We probably ought to fix this instead of suppressing it
		options.compilerArgs << '-Xlint:-module' // We probably ought to fix this instead of suppressing it

		// TODO: Eliminate these. These are legit module problems
		options.compilerArgs << '-Xlint:-requires-automatic'
		options.compilerArgs << '-Xlint:-requires-transitive-automatic'

		options.forkOptions.jvmArgs << '--sun-misc-unsafe-memory-access=allow' // For Lombok
	}

	// It's important that bosk-annotations has no deps so other projects won't hesitate to use it
	if (name != "bosk-annotations") {
		dependencies {
			annotationProcessor libs.lombok
			compileOnly libs.lombok
			implementation libs.slf4j.api

			testAnnotationProcessor libs.lombok
			testCompileOnly libs.lombok

			testImplementation libs.logback.classic

			testImplementation libs.junit.api
			testImplementation libs.junit.params
			testImplementation(platform(libs.junit.bom))
			testRuntimeOnly libs.junit.launcher
			testRuntimeOnly libs.junit.engine

			testImplementation libs.hamcrest
			testImplementation libs.hamcrest.library

			testImplementation libs.testcontainers
			testImplementation libs.testcontainers.junit
			testImplementation libs.testcontainers.toxiproxy

			testImplementation libs.jmh.core
			testAnnotationProcessor libs.jmh.apt
		}
	}

	tasks.register('smoke', Test) {
		// A set of tests that should finish in under a minute or so.
		// Used as a quick double-check before publishing, when we've already
		// run the full test suite and so there's no need to run it again.
		// If publishing takes longer than desired, tests can be annotated
		// with @Slow to omit them from this suite.

		group = 'verification'
		description = 'Skips tests tagged as "slow" for a quick verification that basic functionality works.'

		useJUnitPlatform {
			excludeTags 'slow'
		}
	}

	tasks.withType(Test).configureEach {
		javaLauncher = javaToolchains.launcherFor {
			languageVersion = JavaLanguageVersion.of(jdkVersion)
		}
		useJUnitPlatform()
		enableAssertions = true
		testLogging.showStandardStreams = true
		reports.junitXml.required = true
		jvmArgs += "-Dslf4j.internal.verbosity=error" // Suppress replay warnings due to parallel test execution
	}

	spotbugs {
		excludeFilter = file("${rootProject.projectDir}/spotbugsExclude.xml")
	}

	tasks.matching { it.name == "spotbugsTest" }.configureEach { enabled = false }

}

configure(subprojects.findAll { it.name.startsWith("bosk-") }) {
	dependencies {
		// Make sure common logging settings are applied
		testImplementation project(":lib-testing")
	}
}

// TODO: Spotless currently isn't doing anything and I can't figure out why
spotless {
	enforceCheck = false
	java {
		importOrder '', '\\#' // Static imports after regular imports, as per mt-server standard and IntelliJ default
		removeUnusedImports()
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		replaceRegex 'class-level javadoc indentation fix', /^\*/, ' *'
		replaceRegex 'method-level javadoc indentation fix', /\t\*/, '\t *'
	}
	format 'gradle', {
		target '**/*.gradle'

		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}
	format 'misc', {
		target '**/*.md', '**/.gitignore'

		trimTrailingWhitespace()
		//leadingSpacesToTabs() For markdown, we want to align some code examples very carefully, so we use spaces
		replaceRegex 'class-level javadoc indentation fix', /^\*/, ' *'
		replaceRegex 'method-level javadoc indentation fix', /\t\*/, '\t *'
		endWithNewline()
	}
}

// Apply publishing only to published modules
configure(subprojects.findAll { it.name.startsWith("bosk-") }) {
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	java {
		withSourcesJar()
		withJavadocJar()
	}

	jar {
		manifest {
			// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:jar_manifest
			attributes("Implementation-Version": archiveVersion)
		}
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				versionMapping {
					usage('java-api') { fromResolutionOf('runtimeClasspath') }
					usage('java-runtime') { fromResolutionResult() }
				}
				pom {
					name = 'Bosk'
					packaging = 'jar'
					description = 'Control plane state management library'
					url = 'http://bosk.works'
					licenses {
						license {
							name = 'The Apache License, Version 2.0'
							url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}
					developers {
						developer {
							id = 'pdoyle'
							name = 'Patrick Doyle'
							email = 'p.r.doyle@gmail.com'
						}
						developer {
							id = 'gjohnson'
							name = 'Grady Johnson'
							email = 'gradycsjohnson@gmail.com'
						}
					}
					scm {
						connection = 'scm:git:git://github.com/boskworks/bosk.git'
						developerConnection = 'scm:git:ssh://github.com:boskworks/bosk.git'
						url = 'https://github.com/boskworks/bosk'
					}
				}
			}
		}

		repositories {
			maven {
				def releasesRepoUrl = 'https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/'
				def snapshotsRepoUrl = 'https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/'
				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

				credentials {
					username = project.properties['ossrhUsername'] ?: 'bogusUser'
					password = project.properties['ossrhPassword'] ?: 'bogusPassword'
				}
			}
		}
	}

	signing {
		sign publishing.publications.mavenJava
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")
		useInMemoryPgpKeys(signingKey, signingPassword)
	}

	javadoc {
		failOnError = false
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl = uri('https://ossrh-staging-api.central.sonatype.com/service/local/')
			snapshotRepositoryUrl = uri('https://ossrh-staging-api.central.sonatype.com/content/repositories/snapshots/')
			username = project.properties['ossrhUsername'] ?: 'bogusUser'
			password = project.properties['ossrhPassword'] ?: 'bogusPassword'
		}
	}
}
