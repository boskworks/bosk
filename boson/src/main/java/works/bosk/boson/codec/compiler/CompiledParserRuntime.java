package works.bosk.boson.codec.compiler;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import works.bosk.boson.codec.JsonReader;
import works.bosk.boson.codec.io.SharedParserRuntime;

import static java.util.Objects.requireNonNull;

/**
 * Generated parser classes extend this.
 * It represents a single parse session, parsing a given {@link JsonReader}.
 */
public abstract class CompiledParserRuntime extends SharedParserRuntime {
	private static final AtomicLong curriedArrayCounter = new AtomicLong(0);
	private static final Map<Long, Object[]> curriedArrays = new HashMap<>();

	protected CompiledParserRuntime(JsonReader input) {
		super(input);
	}

	public static long curry(Object[] objects) {
		long key = curriedArrayCounter.incrementAndGet();
		synchronized (curriedArrays) {
			curriedArrays.put(key, objects);
		}
		return key;
	}

	@SuppressWarnings("unused") // Called from generated bytecode
	protected static Object[] claimCurriedArray(long key) {
		Object[] objects;
		synchronized (curriedArrays) {
			objects = curriedArrays.remove(key);
		}
		return requireNonNull(objects);
	}

}
